(use Array)

(load "Test.carp")
(use Test)

(defn nested []
  [[1 2 3]
   [4 5 6]
   [7 8 9]])

(defn excl [x] (String.append x @"!"))

(defn main []
  (let [a (range 0 9 1)
        b (Array.replicate 5 "Hi")]
    (with-test test
      (assert-true test
                   (= &[1 2 3] &[1 2 3])
                   "= works as expected")
      (assert-false test
                    (= &[1 2 3] &[1 2 3 4])
                    "= works as expected")
      (assert-false test
                    (= &[1 2 3] &[1 2 34])
                    "= works as expected")
      (assert-equal test
                    1
                    (first &[1 2 3])
                    "first works as expected")
      (assert-equal test
                    \c
                    (last &[\a \b \c])
                    "last works as expected")
      (assert-equal test
                    &[3 2 1]
                    &(reverse [1 2 3])
                    "reverse works as expected")
      (assert-equal test
                    10
                    (max &(range 1 10 1))
                    "max works as expected")
      (assert-equal test
                    1
                    (min &(range 1 10 1))
                    "min works as expected")
      (assert-equal test
                    55
                    (sum &(range 1 10 1))
                    "sum works as expected")
      (assert-equal test
                    &[2 3]
                    &(subarray &(range 1 10 1) 1 3)
                    "subarray works as expected")
      (assert-equal test
                    &[1 2 3]
                    &(prefix-array &(range 1 10 1) 3)
                    "prefix-array works as expected")
      (assert-equal test
                    &[8 9 10]
                    &(suffix-array &(range 1 10 1) 7)
                    "suffix-array works as expected")
      (assert-equal test
                    5
                    @(nth &a 5)
                    "nth works as expected"
      )
      (assert-equal test
                    &[1 2 3]
                    (nth &(nested) 0)
                    "nth works as expected"
      )
      (assert-equal test
                    &[10 11 12 13 14 15]
                    &(range 10 15 1)
                    "range works as expected"
      )
      (assert-equal test
                    &[10 9 8 7 6 5 4 3 2 1 0]
                    &(range 10 0 -1)
                    "range works as expected"
      )
      (assert-equal test
                    &[@"Hi!" @"Hi!" @"Hi!" @"Hi!" @"Hi!"]
                    &(endo-map excl b)
                    "endo-map works as expected"
      )
      (print-test-results test))))
